bool cmp(pair<int,int>&x, pair<int, int>&y) {
	return x.first != y.first ? x.first < y.first : x.second > y.second;
}

class Solution {
public:
	int maxEnvelopes(vector<pair<int, int>>& envelopes) {
		int n = envelopes.size();
		if (!n) return 0;
		sort(envelopes.begin(), envelopes.end(), cmp);
		vector<int> dp(n, 1),g(n+1, 0x7fffffff);
		for (int i = 0; i < n; i++) {
			int k = lower_bound(++g.begin(), g.end(), envelopes[i].second) - g.begin();
			dp[i] = k;
			g[k] = envelopes[i].second;
		}
		int ans = 0;
		for (int i = 0; i < n; i++) ans = max(ans, dp[i]);
		return ans;
	}
};
