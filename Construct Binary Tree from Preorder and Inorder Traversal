class Solution {
public:
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        if(!preorder.size() || !inorder.size())
            return NULL;
       
        TreeNode* root;
        root = buildTreeRecursion(preorder, 0, preorder.size()-1, inorder, 0, inorder.size()-1);
        return root;
    }
   
    TreeNode *buildTreeRecursion(vector<int> &preorder, int preS, int preE, vector<int> &inorder, int inS, int inE)
    {
        if(preS > preE || inS > inE)
			return NULL;
		
		TreeNode* root = new TreeNode(preorder[preS]);
       
        if(preS == preE && inS == inE)
            return root;
       
        int inRoot;
        for(int i = inS; i <= inE; i++)
		{
            if( inorder[i] == preorder[preS])
			{
                inRoot = i;
			}
		}
        
        int numInLeft = inRoot - inS;
        root->left = buildTreeRecursion(preorder, preS+1, preS+numInLeft, inorder, inS, inRoot-1);
        root->right = buildTreeRecursion(preorder, preS+numInLeft+1, preE, inorder, inRoot+1, inE);

        return root;
    }
};
